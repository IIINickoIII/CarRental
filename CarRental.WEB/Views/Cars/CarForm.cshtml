@model CarRental.WEB.ViewModels.CarFormViewModel
@{
    if (Model.CarViewModel.IsNewCreated)
    {
        ViewBag.Title = "New Car";
    }
    else
    {
        ViewBag.Title = $"{Model.CarViewModel.ManufacturerDto.Name} {Model.CarViewModel.Name}";
    }
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@Html.ActionLink("Back", "Index", "Cars")
<h2>@Model.CarViewModel.Title</h2>
@using (Html.BeginForm("Save", "Cars", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    <div class="grid-container-add-car">
        <div class="grid-item-add-car item1-add-car">
            <div class="form-row">
                <span id="output">
                    @if (!Model.CarViewModel.IsNewCreated)
                    {
                        <img src="@Model.CarViewModel.PictureLink"  class="img-add-car" alt="New Car" />
                    }
                </span>
            </div>
            <hr />
            <div class="form-group img-upload-car-button">
                @Html.LabelFor(m => m.CarViewModel.Picture.Upload, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                @Html.TextBoxFor(m => m.CarViewModel.Picture.Upload, htmlAttributes: new { @type = "file", @class = "form-control-sm", @id = "file", @accept = "image/png" })
                @Html.ValidationMessageFor(m => m.CarViewModel.Picture.Upload)<p></p>
            </div>
        </div>
        <div class="grid-item-add-car item2-add-car">
            <div class="grid-container-under-add-car">
                <div class="grid-item-under-add-car">
                    <div class="form-group">
                        @Html.LabelFor(c => c.CarViewModel.ManufacturerId, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                        @Html.DropDownListFor(c => c.CarViewModel.ManufacturerId, new SelectList(Model.ManufacturerDtos, "Id", "Name"), "Select manufacturer", htmlAttributes: new { @class = "form-control form-control-sm" })
                        @Html.ValidationMessageFor(c => c.CarViewModel.ManufacturerId)
                    </div>
                </div>
                <div class="grid-item-under-add-car">
                    <div class="form-group">
                        @Html.LabelFor(c => c.CarViewModel.Name, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                        @Html.TextBoxFor(c => c.CarViewModel.Name, htmlAttributes: new { @class = "form-control form-control-sm", @placeholder="Land Cruiser 200"})
                        @Html.ValidationMessageFor(c => c.CarViewModel.Name)
                    </div>
                </div>
                <div class="grid-item-under-add-car">
                    <div class="form-group">
                        @Html.LabelFor(c => c.CarViewModel.ProductionYear, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                        @Html.TextBoxFor(c => c.CarViewModel.ProductionYear, htmlAttributes: new { @class = "form-control form-control-sm", @type = "number", @min = 2000, @max = DateTime.Now.Year, @step = 1, @placeholder = "2000" })
                        @Html.ValidationMessageFor(c => c.CarViewModel.ProductionYear)
                    </div>
                </div>
            </div>
            <div class="form-group description-under-add-car">
                @Html.LabelFor(c => c.CarViewModel.Description, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                @Html.TextAreaFor(c => c.CarViewModel.Description, htmlAttributes: new { @class = "form-control form-control-sm description-under-add-car", @rows = 5, @placeholder = "Add some words about this car."})
                @Html.ValidationMessageFor(c => c.CarViewModel.Description)
            </div>
        </div>
        <div class="grid-item-add-car item3-add-car">
            <div class="form-group">
                @Html.LabelFor(c => c.CarViewModel.LicensePlate, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                @Html.TextBoxFor(c => c.CarViewModel.LicensePlate, htmlAttributes: new { @class = "form-control form-control-sm", @placeholder="AA0000BB", @onkeyup="this.value = this.value.toUpperCase();"})
                @Html.ValidationMessageFor(c => c.CarViewModel.LicensePlate)
            </div>
            <div class="form-group">
                @Html.LabelFor(c => c.CarViewModel.NumberOfSeats, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                @Html.TextBoxFor(c => c.CarViewModel.NumberOfSeats, htmlAttributes: new { @class = "form-control form-control-sm", @type = "number", @min = 1, @max = 20, @step = 1 })
                @Html.ValidationMessageFor(c => c.CarViewModel.NumberOfSeats)
            </div>
            <div class="form-group">
                @Html.LabelFor(c => c.CarViewModel.PricePerDay, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                @Html.TextBoxFor(c => c.CarViewModel.PricePerDay, htmlAttributes: new { @class = "form-control form-control-sm", @type = "number", @min = 10, @max = 100000, @step = 1 })
                @Html.ValidationMessageFor(c => c.CarViewModel.PricePerDay)
            </div>
            <div class="form-group">
                <label class="col-form-label col-form-label-sm">
                    @Html.CheckBoxFor(c => c.CarViewModel.WithAirConditioning) With air conditioning.
                </label>
            </div>
            <div class="form-group">
                @Html.LabelFor(c => c.CarViewModel.FuelTypeId, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                @Html.DropDownListFor(c => c.CarViewModel.FuelTypeId, new SelectList(Model.FuelTypeDtos, "Id", "Name"), "Select fuel type", htmlAttributes: new { @class = "form-control form-control-sm" })
                @Html.ValidationMessageFor(c => c.CarViewModel.FuelTypeId)
            </div>
            <div class="form-group">
                @Html.LabelFor(c => c.CarViewModel.GearboxTypeId, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                @Html.DropDownListFor(c => c.CarViewModel.GearboxTypeId, new SelectList(Model.GearboxTypeDtos, "Id", "Name"), "Select gearbox type", htmlAttributes: new { @class = "form-control form-control-sm" })
                @Html.ValidationMessageFor(c => c.CarViewModel.GearboxTypeId)
            </div>
            <div class="form-group">
                @Html.LabelFor(c => c.CarViewModel.TransmissionTypeId, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                @Html.DropDownListFor(c => c.CarViewModel.TransmissionTypeId, new SelectList(Model.TransmissionTypeDtos, "Id", "Name"), "Select transmission type", htmlAttributes: new { @class = "form-control form-control-sm" })
                @Html.ValidationMessageFor(c => c.CarViewModel.TransmissionTypeId)
            </div>
            <div class="form-group">
                @Html.LabelFor(c => c.CarViewModel.CarClassId, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                @Html.DropDownListFor(c => c.CarViewModel.CarClassId, new SelectList(Model.CarClassDtos, "Id", "Name"), "Select car class", htmlAttributes: new { @class = "form-control form-control-sm" })
                @Html.ValidationMessageFor(c => c.CarViewModel.CarClassId)
            </div>
            <div class="form-group">
                @Html.LabelFor(c => c.CarViewModel.BodyTypeId, htmlAttributes: new { @class = "col-form-label col-form-label-sm" })
                @Html.DropDownListFor(c => c.CarViewModel.BodyTypeId, new SelectList(Model.BodyTypeDtos, "Id", "Name"), "Select body type", htmlAttributes: new { @class = "form-control form-control-sm" })
                @Html.ValidationMessageFor(c => c.CarViewModel.BodyTypeId)
            </div>
            @Html.HiddenFor(c => c.CarViewModel.Id)
            @Html.HiddenFor(c => c.CarViewModel.PictureLink)
            @Html.AntiForgeryToken()
            <button type="submit" class="btn btn-primary btn-add-car">Save</button>
        </div>
    </div>
}
@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script>
            function clearChild() {
                var span = document.getElementById('output');
                while (span.hasChildNodes()) {
                    span.removeChild(span.firstChild);
                }
            }
            function handleFileSelect(evt) {
                var file = evt.target.files; // FileList object
                var f = file[0];
                // Only process image files.
                if (!f.type.match('image.*')) {
                    alert("Image only please....");
                    return;
                }
                var reader = new FileReader();
                // Closure to capture the file information.
                reader.onload = (function (theFile) {
                    return function (e) {
                        // Render thumbnail.
                        clearChild();
                        document.getElementById('output').innerHTML = ['<img class="img-add-car" title="', escape(theFile.name), '" src="', e.target.result, '" />'].join('');
                    };
                })(f);
                // Read in the image file as a data URL.
                reader.readAsDataURL(f);
            }
            document.getElementById('file').addEventListener('change', handleFileSelect, false);
        </script>
}